import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'io.github.p03w.machete' version '2.+'
	id 'org.quiltmc.loom' version '+'
	id 'org.jetbrains.kotlin.jvm' version '1.7.22'
	id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.22'
	id("com.google.devtools.ksp") version "1.7.22-1.0.8"
	id 'org.cadixdev.licenser' version '0.6.1'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+${project.minecraft_version}"
group = project.maven_group

repositories {
	maven {
		name = 'Ladysnake Mods'
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
	maven {
		name = "Curseforge"
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup 'maven.modrinth'
		}
	}
    maven {
		name = "Nucleoid"
        url "https://maven.nucleoid.xyz/"
    }
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Sleeping Town"
		url 'https://repo.sleeping.town'
		content {
			includeGroup 'com.unascribed'
		}
	}
	maven {
		name = "Fuzs Mod Resources"
		url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
	}
	maven {
		name = "JitPack"
		url = "https://jitpack.io"
	}
	mavenLocal()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:intermediary-v2"
	modImplementation "org.quiltmc:quilt-loader:${project.loader_version}"

	// QSL
	modImplementation "org.quiltmc:qsl:${qsl_version}+${minecraft_version}"
	modImplementation("org.quiltmc.quilted-fabric-api:quilted-fabric-api:${qfapi_version}") {
		exclude(group: "org.quiltmc.qsl")
	}

	// QKL
	modImplementation("org.quiltmc.quilt-kotlin-libraries:quilt-kotlin-libraries:1.0.1+kt.1.7.22+flk.1.8.6") {
		exclude(group: "org.quiltmc.qsl")
	}

	// Hooky
	implementation(project("Hooky"))
	ksp(project("Hooky"))

	// Cardinal components base
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"

	// Cardinal components entity
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"

	// Translations
	modImplementation "fr.catcore:server-translations-api:1.4.18+1.19.2"
	include "fr.catcore:server-translations-api:1.4.18+1.19.2"

	// Harvest with ease
	modImplementation "curse.maven:harvestwithease-602171:4132276"
	// Forge Config API Port
	modImplementation "net.minecraftforge:forgeconfigapiport-fabric:4.2.6"
}

processResources {
	inputs.property "version", project.version

	filesMatching("quilt.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"

	it.options.release = 17
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

tasks.withType(KotlinCompile).configureEach {
	kotlinOptions {
		jvmTarget = '17'
	}
}

kotlin {
	sourceSets {
		main.kotlin.srcDirs += 'build/generated/ksp/main/kotlin'
		test.kotlin.srcDirs += 'build/generated/ksp/test/kotlin'
	}
}

license {
	header = project.file('LICENSE_FILE_HEADER')
}

assemble.dependsOn(updateLicenses)

subprojects {
	plugins.apply("org.cadixdev.licenser")
	license {
		header = rootProject.file('LICENSE_FILE_HEADER')
	}
	assemble.dependsOn(updateLicenses)
}